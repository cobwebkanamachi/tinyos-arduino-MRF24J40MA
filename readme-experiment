This is a experiment on Uno compatible breadboard machine with MRF24J40MA.
environment:
 * xubuntos, virtualbox, osx, arduino ide(same i wrote on tos on msp430)
 * avrispmkii
 * breadboard x 3 (one for MRF24J40MA)
 * FTDI TTL 3.3v x 2 (or FT232RL) from AKIZUKI denshi tsusho
 * MRF24J40MA x 2
 * many jumper wires
 * ATMEGA328P (dip) x 2 or 3
 * XTAL x 2 or 3
 * registers, capacitors, LEDs
 * USB cables you need
 * Power supply (or get from USB..., i use leads from USB)

1. Procedures i did (on TinyOS make)
1.1 get zip archive of markushx/tinyos-arduino-MRF24J40MA
1.2 set enviromental variables
   export TOSROOT=/home/user/Desktop/tosMRFard
   export TOSDIR=$TOSROOT/tos
   export MAKERULES=/home/user/Desktop/tosMRFard/support/make/Makerules
1.3 cd apps/RadioCountToLeds
1.4 make uno
1.5 tos-set-symbols --read main.exe
.data                         :    []
AMQueueImplP__0__current      :  01  [.]  (1)
ActiveMessageAddressC__addr   :  01 00  [..]  (1)
ActiveMessageAddressC__group  :  22  ["]  (34)
CSWTCH.72                     :  00 02 0e 06 0c  [.....]
FcfsResourceQueueC__0__qHead  :  ff  [.]  (255)
FcfsResourceQueueC__0__qTail  :  ff  [.]  (255)
McuSleepC__dirty              :  01  [.]  (1)
SimpleArbiterP__0__resId      :  ff  [.]  (255)
TOS_NODE_ID                   :  01 00  [..]  (1)
you get listing like above.
1.6 make srec, ihex from main.exe (if make do this, you can omit this)
avr-objcopy --output-target=srec main.exe main.srec
avr-objcopy --output-target=ihex main.exe main.ihex
1.7 if tweak misc ids, do that like this
tos-set-symbols main.srec build/iris/main.srec.out-foo TOS_NODE_ID=0 ActiveMessageAddressC$addr=0
1.8 copy build/uno/main.srec /media/sf_foo/bar
if you tweak ids on srec, you should use overwrited srec file(like main.srec.out-foo).
1.9 use avrdude (chip erase,write firmware, etc)
if you tweak ids on srec, you should use overwrited srec file(like main.srec.out-foo).
i did put srec to mcu like this.
/Applications/Arduino.app/Contents/Resources/Java/hardware/tools/avr/bin/avrdude -C/Applications/Arduino.app/Contents/Resources/Java/hardware/tools/avr/etc/avrdude.conf -v -v -v -v -patmega328p -cavrispmkii -P usb -b57600 -D -Uflash:w:./main.srec:i
i did erase mcu like this.
---begin
export ARD=/Applications/Arduino.app/Contents/Resources/Java/hardware/tools/avr/etc/avrdude.conf
export AVRDUD=/Applications/Arduino.app/Contents/Resources/Java/hardware/tools/avr/bin/avrdude
export PA=\.\/
clear
ECHO BATCH COPY ATMEGA328P-PU VIA ARDUINO-ISP ON usb
ECHO ENSURE MASTER CHIP IS IN THE READER
ECHO CTRL+C abort OR PRESS Any key to begin copy...
while IFS= read -r -n1 char
do
        # display one character at a time
        break   
done
$AVRDUD -C $ARD -v -v -v -v -cavrispmkii -P usb -p ATMEGA328P -b 19200 -e
---end
if you need deadcopy of mcus you can do like this.
$AVRDUD -C $ARD -v -v -v -v -cavrispmkii -P usb -p ATMEGA328P -b 19200 -U flash:r:$PA\backup_flash.hex:i
$AVRDUD -C $ARD -v -v -v -v -cavrispmkii  -P usb -p ATMEGA328P -b 19200 -U eeprom:r:$PA\backup_eeprom.hex:i
$AVRDUD -C $ARD -v -v -v -v -cavrispmkii  -P usb -p ATMEGA328P -b 19200 -U hfuse:r:$PA\backup_hfuse.hex:i
$AVRDUD -C $ARD -v -v -v -v -cavrispmkii  -P usb -p ATMEGA328P -b 19200 -U lfuse:r:$PA\backup_lfuse.hex:i
$AVRDUD -C $ARD -v -v -v -v -cavrispmkii  -P usb -p ATMEGA328P -b 19200 -U efuse:r:$PA\backup_efuse.hex:i
and you could compare several mcus.
if you have a mcu differ on flash or else, you could erase chip like above, then put backed up hex write to that.
i could fix all having ATMEGA328P with this procedure getting functional :-).
but could not fix electorically dameged one...
2. hardware environment
2.1 how to make ATMEGA328P to UNO compatible
you have at least a genuin UNO or fix chiken-egg problem with AVR writer like avrispmkii or handmade one.
2.1.1 arduino isp circuit
http://wordpress.alphao.org/2013/04/18/alphaos-custom-arduino-board-burning-the-boot-loader/arduinoisp-2/
i use this and add on some circuit (FTDI for serial communication with base computer)
2.1.2 wtite bootloader with arduino isp or else
http://blog-yama.a-quest.com/?eid=970124
i use optifix with reading like above article.
2.1.3 test machine with arduino ide
test with simple blink.
i did like this.
/*
  Blink
  Turns on an LED on for one second, then off for one second, repeatedly.
  This example code is in the public domain.
 */
// Pin 13 has an LED connected on most Arduino boards.
// give it a name:
int led = 13;
// the setup routine runs once when you press reset:
void setup() {          
  Serial.begin(115200);
  // initialize the digital pin as an output.
  pinMode(led, OUTPUT);  
  Serial.println("Init¥n");  
}
// the loop routine runs over and over again forever:
void loop() {
  digitalWrite(led, HIGH);   // turn the LED on (HIGH is the voltage level)
  delay(200);               // wait for a second
  digitalWrite(led, LOW);    // turn the LED off by making the voltage LOW
  delay(200);               // wait for a second
  Serial.println("Test¥n");
}
2.2 MRF24j40ma pin mapping
This is under experiment.
i wrote using pin mapping only now.
MRF            Arduino     328P
GND   1        GND         GND
RESET 2        6           12(pd6)
INTR  4        2           2(pd1)
SDI   5        11          17(pb3)
SCK   6        13          19(pb5)
SDO   7        12          18(pb4)
CS    8        7           13(pd7)
VIN   10       -           from FTDI 3v3
# if you use avrdude with avrispmkii, SPI connection conflict with avrdude and mrf.
# so if you prefer avoid one, please disconnet jumper pin from mrf pins shown bellow.
# pin 5(SDI), pin6(SCK), pin 10(VIN).
# if you troubled with avrispmkii, please disconnect usb and reconnect that.
# and you should power on ATMEGA328P if you use avrdude with avrispmkii.
